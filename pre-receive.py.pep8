#!/usr/bin/env python

import sys
import fileinput
import subprocess
import re
import tempfile


# Read in each ref that the user is trying to update
for vals in fileinput.input():

    prev_id, new_id, refs = vals.split()
    print("pre-receive: Trying to push:- prev: {0}, new: {1}, refs: {2} "
          .format(prev_id, new_id, refs))

    # git ls-tree --full-name -r bb65cc34fd27e761cc03695167a7b22a298
    # -> 100644 blob fc23bf7e9b9ce019c4eff503dd07733bfc6c66e4	mypy.py
    args = "git ls-tree --full-name -r {0}".format(new_id).split()
    out = subprocess.check_output(args)

    # initialize list that will hold all pep8 error msg's
    status = []

    for file_ref, file_name in re.findall(r'(\S+)\s+(\w+\.py)', out):

        print("Refs: {0} {1}".format(file_ref, file_name))
        file_contents = subprocess.check_output(["git", "show", file_ref])

        with tempfile.NamedTemporaryFile() as temp:
            temp.write(file_contents)
            temp.flush()  # in case of delay do a 'courtesy flush' immediately

            p = subprocess.Popen(['pep8', '{0}'.format(temp.name)],
                                 stdout=subprocess.PIPE)
            outp, err = p.communicate()

            if outp:
                status.append("{0}: {1}".format(file_name, outp))

    if status:
        print("****************************\n\n"
              "GIT COMMIT FAILED:\n"
              "PEP8 violations found. Study the output and please resolve\n\n"
              "***************************\n")
        for msg in status:
            print(msg)

        # Abort the push
        sys.exit(1)
